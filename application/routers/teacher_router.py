import glob
import re
import hashlib
import os

from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardButton, InlineKeyboardMarkup, InlineKeyboardBuilder

from application.states import PasswordCheck, FeedbackState
from application.database.requests import get_homework_with_details, get_teacher_by_password, get_users_by_ids, \
    get_student_by_id, get_homework_by_file_hash, get_teacher_by_id, update_feedback_sent
from application.database.models import PointsHistory, async_session

router = Router(name=__name__)

file_hash_map = {}


@router.message(Command('teacher'))
async def register_students(message: Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=ReplyKeyboardRemove())
    await state.set_state(PasswordCheck.EnterPassword)


@router.message(PasswordCheck.EnterPassword)
async def check_password(message: Message, state: FSMContext):
    commands = ['/profile', '/homework', '/top', '/leader', '/monetization', '/info', '/support', '/registration',
                '/start', '/newsletter']
    input_text = message.text

    if input_text in commands:
        await state.clear()
        await message.answer("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑.")
        return

    input_password = input_text.strip()
    teacher = await get_teacher_by_password(input_password)

    if teacher:
        teacher_full_name = f'{teacher.name} {teacher.last_name}'
        await message.answer(f'–ü–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {teacher_full_name}!')
        keyboard = await students_choice(teacher.id)
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:', reply_markup=keyboard)
        await state.clear()
    else:
        await message.answer('üôà –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


async def students_choice(teacher_id: int) -> InlineKeyboardMarkup:
    directories = {
        "application/media/photo": "*.jpg",
        "application/media/text": "*.txt",
        "application/media/video": "*.mp4",
        "application/media/links": "*.html",
        "application/media/voice": "*.ogg",
    }

    student_ids = set()
    for directory, ext in directories.items():
        files = glob.glob(f"{directory}/{teacher_id}_*{ext}")
        for filename in files:
            match = re.search(rf"{teacher_id}_(\d+)_", filename)
            if match:
                student_ids.add(match.group(1))

    if not student_ids:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π", callback_data="no_homework")]
        ])
        return keyboard

    students_choice_kb = InlineKeyboardBuilder()
    students = await get_users_by_ids(list(student_ids))
    for student in students:
        full_name = f'{student.name} {student.last_name}'
        students_choice_kb.add(InlineKeyboardButton(text=full_name, callback_data=f'student_{student.id}_{teacher_id}'))
    return students_choice_kb.adjust(2).as_markup()


async def generate_hash(file_path):
    filename = os.path.basename(file_path)
    file_hash = hashlib.md5(filename.encode()).hexdigest()
    file_hash_map[file_hash] = file_path
    return file_hash


@router.callback_query(F.data.startswith('student_'))
async def student_files(callback: CallbackQuery, bot: Bot):
    parts = callback.data.split('_')
    student_id = parts[1]
    teacher_id = parts[2]

    directories = {
        "application/media/photo": f"{teacher_id}_{student_id}_*.jpg",
        "application/media/text": f"{teacher_id}_{student_id}_*.txt",
        "application/media/video": f"{teacher_id}_{student_id}_*.mp4",
        "application/media/links": f"{teacher_id}_{student_id}_*.html",
        "application/media/voice": f"{teacher_id}_{student_id}_*.ogg",
    }

    files_found = False
    for directory, pattern in directories.items():
        full_pattern = f"{directory}/{pattern}"
        files = glob.glob(full_pattern)

        for filename in files:
            files_found = True
            file_hash = await generate_hash(filename)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_{file_hash}'),
                 InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_{file_hash}')],
                [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data=f'feedback_{file_hash}')]
            ])
            file_input = FSInputFile(path=filename)

            await bot.send_document(chat_id=callback.from_user.id, document=file_input, reply_markup=keyboard)

    if not files_found:
        await callback.message.answer("–£ —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")


@router.callback_query(F.data.startswith('accept_'))
async def accept_homework(callback: CallbackQuery):
    file_hash = callback.data.split('_', 1)[1]

    async with async_session() as session:
        homework, student = await get_homework_with_details(session, file_hash)

        if not homework:
            await callback.answer(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        if not student:
            await callback.answer(text="–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        if not homework.feedback_sent:
            await callback.answer(text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
                                  show_alert=True)
            return

        points_to_add = 3
        student.point = (student.point or 0) + points_to_add

        new_points_history = PointsHistory(student_id=student.id, points_added=points_to_add, date_added=datetime.now())
        session.add(new_points_history)

        await session.delete(homework)
        await session.commit()

        file_path = file_hash_map.get(file_hash)
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", callback_data=f'checked_{file_hash}')]
    ])

    await callback.message.edit_reply_markup(reply_markup=updated_keyboard)


@router.callback_query(F.data.startswith('decline_'))
async def decline_homework(callback: CallbackQuery):
    file_hash = callback.data.split('_', 1)[1]

    async with async_session() as session:
        homework, student = await get_homework_with_details(session, file_hash)

        if not homework:
            await callback.answer(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        if not student:
            await callback.answer(text="–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        if not homework.feedback_sent:
            await callback.answer(text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
                                  show_alert=True)
            return

        await session.delete(homework)
        await session.commit()

        file_path = file_hash_map.get(file_hash)
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

    updated_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", callback_data=f'checked_{file_hash}')]
    ])

    await callback.message.edit_reply_markup(reply_markup=updated_keyboard)


@router.callback_query(F.data.startswith('checked_'))
async def checked_homework(callback: CallbackQuery):
    await callback.answer(text="–≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.", show_alert=True)


@router.callback_query(F.data.startswith('no_homework'))
async def checked_homework(callback: CallbackQuery):
    await callback.answer(text="–î–ª—è –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", show_alert=True)


@router.callback_query(F.data.startswith('feedback_'))
async def feedback_homework(callback: CallbackQuery, state: FSMContext):
    file_hash = callback.data.split('_', 1)[1]

    async with async_session() as session:
        homework = await get_homework_by_file_hash(session, file_hash)
        if not homework:
            await callback.message.answer("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        student = await get_student_by_id(session, homework.student_id)
        if not student:
            await callback.message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        teacher = await get_teacher_by_id(session, homework.teacher_id)
        if not teacher:
            await callback.message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        teacher_full_name = f'{teacher.name} {teacher.last_name}'

        await state.update_data(student_tg_id=student.tg_id, teacher_full_name=teacher_full_name,
                                homework_id=homework.id)
        await state.set_state(FeedbackState.WaitingForText)

        cancel_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="car_feedback")]
            ]
        )

        await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=cancel_button)

    await callback.answer()


@router.message(F.text, FeedbackState.WaitingForText)
async def receive_feedback_text(message: Message, state: FSMContext, bot: Bot):
    feedback_text = message.text
    data = await state.get_data()
    student_tg_id = data.get('student_tg_id')
    teacher_full_name = data.get('teacher_full_name')
    homework_id = data.get('homework_id')

    text = (
        f"üì¨ –£ –≤–∞—Å –Ω–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback_text}\n\n"
        f"üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_full_name}."
    )

    try:
        await bot.send_message(chat_id=student_tg_id, text=text)
        await message.answer(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—É.")

        async with async_session() as session:
            await update_feedback_sent(session, homework_id)

    except Exception as e:
        await message.answer(text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É: {e}")

    await state.clear()


@router.message(F.photo | F.video | F.document | F.sticker | F.voice | F.location | F.contact | F.poll,
                FeedbackState.WaitingForText)
async def wrong_type_for_text(message: Message):
    await message.answer(text="ü•∫–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–æ–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data.startswith('car_feedback'), FeedbackState.WaitingForText)
async def checked_homework(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)


@router.callback_query(F.data.startswith('car'))
async def checked_homework(callback: CallbackQuery):
    await callback.answer(text="–û—Ç–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
