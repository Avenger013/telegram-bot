import phonenumbers

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update, delete

from application.states import RegistrationState, UpdateRegistrationState, UpdateParts
from application.database.models import Student, async_session, StudentTeacher
from application.database.requests import get_student_info, get_student

import application.keyboard as kb

router = Router(name=__name__)


@router.message(F.text == 'üéí –£—á–µ–Ω–∏–∫')
async def choice_of_directional(message: Message, state: FSMContext):
    await register_student(message, state)


async def register_student(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    async with async_session() as session:
        student = await get_student(session, tg_id)
        if student:
            await message.answer(
                text='üòÅ–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –∫–Ω–æ–ø–æ–∫.',
                reply_markup=kb.menu
            )
        else:
            await message.answer(
                text=f'{message.from_user.first_name}, –≤—ã –≤–æ—à–ª–∏ –ø–æ–¥ —Ä–æ–ª—å—é —É—á–µ–Ω–∏–∫–∞ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
                reply_markup=kb.registration
            )


@router.callback_query(F.data.startswith('registration'))
async def register_students(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ):')
    await callback.answer('')
    await state.set_state(RegistrationState.EnterPhone)


@router.message(Command('registration'))
async def handle_register_students(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    async with async_session() as session:
        student = await get_student(session, tg_id)
        if student:
            await message.answer(
                text='üòÅ–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.üçæ',
                reply_markup=kb.menu
            )
        else:
            await message.answer('–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ):')
            await state.set_state(RegistrationState.EnterPhone)


@router.message(RegistrationState.EnterPhone)
async def enter_last_name(message: Message, state: FSMContext):
    raw_phone = message.text.strip()

    if not raw_phone.isdigit() or len(raw_phone) != 10:
        await message.answer('''
            –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞, –±–µ–∑ +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ''')
        return

    formatted_phone = f"+7 ({raw_phone[:3]}) {raw_phone[3:6]}-{raw_phone[6:8]}-{raw_phone[8:]}"

    await state.update_data(phone=formatted_phone)
    await message.answer(text=f'–¢–µ–ª–µ—Ñ–æ–Ω {formatted_phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    await state.set_state(RegistrationState.EnterName)


@router.message(RegistrationState.EnterName)
async def enter_name(message: Message, state: FSMContext):
    name = message.text

    if not name.isalpha():
        await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:')
        return

    await state.update_data(name=name)
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, {name}! \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')
    await state.set_state(RegistrationState.EnterLastName)


@router.message(RegistrationState.EnterLastName)
async def enter_last_name(message: Message, state: FSMContext):
    last_name = message.text

    if not last_name.isalpha():
        await message.answer('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑:')
        return

    await state.update_data(last_name=last_name)
    await message.answer(text=f'–§–∞–º–∏–ª–∏—è {last_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',
                         reply_markup=kb.tool1)
    await state.set_state(RegistrationState.ChoiceSpecialisation)


@router.callback_query(F.data.in_(['vocal', 'guitar', 'vocal_guitar']), RegistrationState.ChoiceSpecialisation)
async def process_specialisation(callback_query: CallbackQuery, state: FSMContext):
    specialisation_mapping = {
        'vocal': '–í–æ–∫–∞–ª',
        'guitar': '–ì–∏—Ç–∞—Ä–∞',
        'vocal_guitar': '–í–æ–∫–∞–ª –∏ –ì–∏—Ç–∞—Ä–∞'
    }
    specialisation = specialisation_mapping[callback_query.data]
    await state.update_data(specialisation_student=specialisation)

    if specialisation == '–í–æ–∫–∞–ª':
        reply_markup = await kb.teachers_choice_students_da_v()
    elif specialisation == '–ì–∏—Ç–∞—Ä–∞':
        reply_markup = await kb.teachers_choice_students_da_g()
    else:
        reply_markup = await kb.teachers_choice_students_da()

    await callback_query.message.edit_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {specialisation}. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=reply_markup
    )
    await state.set_state(RegistrationState.ChoiceIDTeacher)


@router.callback_query(F.data.startswith('select_teacher_'))
async def teacher_selected_students(callback: CallbackQuery, state: FSMContext):
    teacher_id = int(callback.data.split('_')[2])
    data = await state.get_data()
    selected_teachers = data.get('selected_teachers', [])
    if teacher_id in selected_teachers:
        selected_teachers.remove(teacher_id)  # –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    else:
        selected_teachers.append(teacher_id)  # –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    await state.update_data(selected_teachers=selected_teachers)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
    new_markup = await kb.teachers_choice_students_da(selected_teachers)
    await callback.message.edit_reply_markup(reply_markup=new_markup)


@router.callback_query(F.data.startswith('1select_teacher_'))
async def teacher_selected_students(callback: CallbackQuery, state: FSMContext):
    teacher_id = int(callback.data.split('_')[2])
    data = await state.get_data()
    selected_teachers = data.get('selected_teachers', [])
    if teacher_id in selected_teachers:
        selected_teachers.remove(teacher_id)
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    else:
        selected_teachers.append(teacher_id)
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    await state.update_data(selected_teachers=selected_teachers)

    new_markup = await kb.teachers_choice_students_da_v(selected_teachers)
    await callback.message.edit_reply_markup(reply_markup=new_markup)


@router.callback_query(F.data.startswith('2select_teacher_'))
async def teacher_selected_students(callback: CallbackQuery, state: FSMContext):
    teacher_id = int(callback.data.split('_')[2])
    data = await state.get_data()
    selected_teachers = data.get('selected_teachers', [])
    if teacher_id in selected_teachers:
        selected_teachers.remove(teacher_id)
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    else:
        selected_teachers.append(teacher_id)
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    await state.update_data(selected_teachers=selected_teachers)

    new_markup = await kb.teachers_choice_students_da_g(selected_teachers)
    await callback.message.edit_reply_markup(reply_markup=new_markup)


@router.callback_query(F.data.startswith('done_selecting_teachers'))
async def teacher_selected_students(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_teachers = data.get('selected_teachers', [])
    tg_id = callback.from_user.id

    async with async_session() as session:
        student = await session.scalar(select(Student).filter_by(tg_id=tg_id))

        if student:
            if any(data.get(f'new_{field}') for field in ['name', 'last_name', 'phone', 'specialisation_student']):
                new_name = data.get('new_name', student.name)
                new_last_name = data.get('new_last_name', student.last_name)
                new_phone = data.get('new_phone', student.phone)
                new_specialisation_student = data.get('new_specialisation_student', student.specialisation_student)

                await session.execute(
                    update(Student)
                    .where(Student.tg_id == tg_id)
                    .values(
                        name=new_name,
                        last_name=new_last_name,
                        phone=new_phone,
                        specialisation_student=new_specialisation_student
                    )
                )
                message_text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!'
        else:
            student = Student(tg_id=tg_id, name=data.get('name'), last_name=data.get('last_name'),
                              phone=data.get('phone'),
                              specialisation_student=data.get('specialisation_student'), point=0)
            session.add(student)
            await session.flush()
            message_text = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –°–ø–∞—Å–∏–±–æ!'

        await session.execute(delete(StudentTeacher).where(StudentTeacher.student_id == student.id))

        for teacher_id in selected_teachers:
            new_student_teacher = StudentTeacher(student_id=student.id, teacher_id=teacher_id)
            session.add(new_student_teacher)

        await session.commit()
        await callback.message.answer(text=message_text, reply_markup=kb.menu)
        await state.clear()


@router.callback_query(F.data.startswith('update_info'))
async def change_inline_keyboard(callback: CallbackQuery):
    tg_id = callback.from_user.id
    async with async_session() as session:
        student, teachers = await get_student_info(session, tg_id)

        if student:
            teacher_word = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" if len(teachers) == 1 else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
            teachers_info = "–ù–µ —É–∫–∞–∑–∞–Ω" if not teachers else ", ".join([f"{t.name} {t.last_name}" for t in teachers])

            await callback.message.edit_text(text=f"<b>–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
                                                  f"–ò–º—è (üë§): {student.name}\n"
                                                  f"–§–∞–º–∏–ª–∏—è (üë§): {student.last_name}\n"
                                                  f"–¢–µ–ª–µ—Ñ–æ–Ω (üìû): {student.phone}\n"
                                                  f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (üé§/üé∏): {student.specialisation_student}\n"
                                                  f"{teacher_word} (üéì): {teachers_info}\n"
                                                  "\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                                             parse_mode="HTML", reply_markup=kb.updating_in_parts)


@router.callback_query(F.data.startswith('up_all'))
async def update_info(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ):")
    await state.set_state(UpdateRegistrationState.UpdatePhone)


@router.message(UpdateRegistrationState.UpdatePhone)
async def update_phone(message: Message, state: FSMContext):
    raw_phone = message.text.strip()

    if not raw_phone.isdigit() or len(raw_phone) != 10:
        await message.answer('''
            –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞, –±–µ–∑ +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ''')
        return

    new_phone = f"+7 ({raw_phone[:3]}) {raw_phone[3:6]}-{raw_phone[6:8]}-{raw_phone[8:]}"

    await state.update_data(new_phone=new_phone)
    await message.answer(text=f'–û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {new_phone}!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:')
    await state.set_state(UpdateRegistrationState.UpdateName)


@router.message(UpdateRegistrationState.UpdateName)
async def update_name(message: Message, state: FSMContext):
    new_name = message.text

    if not new_name.isalpha():
        await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:')
        return

    await state.update_data(new_name=new_name)
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤–æ–µ –∏–º—è: {new_name}!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:')
    await state.set_state(UpdateRegistrationState.UpdateLastName)


@router.message(UpdateRegistrationState.UpdateLastName)
async def update_last_name(message: Message, state: FSMContext):
    new_last_name = message.text

    if not new_last_name.isalpha():
        await message.answer('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑:')
        return

    await state.update_data(new_last_name=new_last_name)
    await message.answer(text=f'–û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è: {new_last_name}!\n–í–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:',
                         reply_markup=kb.tool2)
    await state.set_state(UpdateRegistrationState.UpdateChoiceSpecialisation)


@router.callback_query(F.data.in_(['new_vocal', 'new_guitar', 'new_vocal_guitar']),
                       UpdateRegistrationState.UpdateChoiceSpecialisation)
async def update_process_specialisation(callback_query: CallbackQuery, state: FSMContext):
    specialisation_mapping = {
        'new_vocal': '–í–æ–∫–∞–ª',
        'new_guitar': '–ì–∏—Ç–∞—Ä–∞',
        'new_vocal_guitar': '–í–æ–∫–∞–ª –∏ –ì–∏—Ç–∞—Ä–∞'
    }
    new_specialisation_student = specialisation_mapping[callback_query.data]
    await state.update_data(new_specialisation_student=new_specialisation_student)

    if new_specialisation_student == '–í–æ–∫–∞–ª':
        reply_markup = await kb.teachers_choice_students_da_v()
    elif new_specialisation_student == '–ì–∏—Ç–∞—Ä–∞':
        reply_markup = await kb.teachers_choice_students_da_g()
    else:
        reply_markup = await kb.teachers_choice_students_da()

    await callback_query.message.edit_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {new_specialisation_student}. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=reply_markup
    )
    await state.set_state(UpdateRegistrationState.UpdateIDTeacher)


@router.callback_query(F.data.startswith('up_name'))
async def update_parts_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(UpdateParts.UpdatePartsName)


@router.message(UpdateParts.UpdatePartsName)
async def process_new_name(message: Message, state: FSMContext):
    parts_name = message.text
    tg_id = message.from_user.id

    if not parts_name.isalpha():
        await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:')
        return

    async with async_session() as session:
        await session.execute(
            update(Student)
            .where(Student.tg_id == tg_id)
            .values(name=parts_name)
        )
        await session.commit()

    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –∏–º—è –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.', reply_markup=kb.menu1)
    await state.clear()


@router.callback_query(F.data.startswith('up_last_name'))
async def update_parts_last_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(UpdateParts.UpdatePartsLastName)


@router.message(UpdateParts.UpdatePartsLastName)
async def process_new_last_name(message: Message, state: FSMContext):
    parts_last_name = message.text
    tg_id = message.from_user.id

    if not parts_last_name.isalpha():
        await message.answer('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –µ—â–µ —Ä–∞–∑:')
        return

    async with async_session() as session:
        await session.execute(
            update(Student)
            .where(Student.tg_id == tg_id)
            .values(last_name=parts_last_name)
        )
        await session.commit()

    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.', reply_markup=kb.menu1)
    await state.clear()


@router.callback_query(F.data.startswith('up_phone'))
async def update_parts_phone(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ):")
    await state.set_state(UpdateParts.UpdatePartsPhone)


@router.message(UpdateParts.UpdatePartsPhone)
async def process_new_phone(message: Message, state: FSMContext):
    raw_phone = message.text.strip()
    tg_id = message.from_user.id

    if not raw_phone.isdigit() or len(raw_phone) != 10:
        await message.answer('''
                –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞, –±–µ–∑ +7 –∏–ª–∏ 8 –≤ –Ω–∞—á–∞–ª–µ''')
        return

    parts_phone = f"+7 ({raw_phone[:3]}) {raw_phone[3:6]}-{raw_phone[6:8]}-{raw_phone[8:]}"

    async with async_session() as session:
        await session.execute(
            update(Student)
            .where(Student.tg_id == tg_id)
            .values(phone=parts_phone)
        )
        await session.commit()

    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.', reply_markup=kb.menu1)
    await state.clear()


@router.callback_query(F.data.startswith('up_specialization_and_teachers'))
async def change_parts_inline_keyboard(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:', reply_markup=kb.tool3)
    await state.set_state(UpdateParts.UpdatePartsChoiceSpecialisation)


@router.callback_query(F.data.in_(['new_parts_vocal', 'new_parts_guitar', 'new_parts_vocal_guitar']),
                       UpdateParts.UpdatePartsChoiceSpecialisation)
async def update_parts_process_specialisation(callback_query: CallbackQuery, state: FSMContext):
    specialisation_mapping = {
        'new_parts_vocal': '–í–æ–∫–∞–ª',
        'new_parts_guitar': '–ì–∏—Ç–∞—Ä–∞',
        'new_parts_vocal_guitar': '–í–æ–∫–∞–ª –∏ –ì–∏—Ç–∞—Ä–∞'
    }
    new_parts_specialisation_student = specialisation_mapping[callback_query.data]
    await state.update_data(new_specialisation_student=new_parts_specialisation_student)

    if new_parts_specialisation_student == '–í–æ–∫–∞–ª':
        reply_markup = await kb.teachers_choice_students_da_v()
    elif new_parts_specialisation_student == '–ì–∏—Ç–∞—Ä–∞':
        reply_markup = await kb.teachers_choice_students_da_g()
    else:
        reply_markup = await kb.teachers_choice_students_da()

    await callback_query.message.edit_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {new_parts_specialisation_student}. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=reply_markup
    )
    await state.set_state(UpdateParts.UpdatePartsIDTeacher)