import os
import re
import datetime

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from aiogram.exceptions import TelegramBadRequest

from application.states import HomeworkState, HomeworkState2
from application.database.models import Student, async_session
from application.database.requests import get_student

import application.keyboard as kb

router = Router(name=__name__)


async def info_homework(callback: CallbackQuery, reply_markup):
    homework_text = (
        "<b>‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –î–ó</b>\n\n"
        "–ï—Å—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä:\n\n"
        "üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –î–ó\n"
        "‚îú –î–∞–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—à –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
        "‚îú –î–∑ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≤–∏–¥–µ: <b>—Ñ–æ—Ç–æ</b>, <b>–≤–∏–¥–µ–æ</b>, <b>—Ç–µ–∫—Å—Ç–∞</b>, <b>–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ</b> –∏–ª–∏ <b>—Å—Å—ã–ª–∫–∏</b>\n"
        "‚îú –ó–∞ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+3 –±–∞–ª–ª–∞</b>, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º\n\n"
        "üìÜ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
        "‚îú –î–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚îú –ó–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤, –æ–±—É—á–∞—é—â–∏—Ö—Å—è —Ç–æ–ª—å–∫–æ –≤–æ–∫–∞–ª—É, —Ç–æ–ª—å–∫–æ –≥–∏—Ç–∞—Ä–µ –∏–ª–∏ —Å—Ä–∞–∑—É –≤–æ–∫–∞–ª—É –∏ –≥–∏—Ç–∞—Ä–µ, –±—É–¥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è\n"
        "‚îú –ó–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)\n"
        "‚îú –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞, –∑–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è\n"
        "‚îú –ó–∞ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+1 –±–∞–ª–ª</b>, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º\n\n"
        "üìπ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –ø–µ—Å–Ω–∏ –≤ —Å–≤–æ–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏\n"
        "‚îú –ü–µ—Å–Ω—é –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ª—é–±—É—é, –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é\n"
        "‚îú –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü\n"
        "‚îú –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+2 –±–∞–ª–ª–∞</b>, –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"
    )
    await callback.message.edit_text(text=homework_text, parse_mode='HTML', reply_markup=reply_markup)


@router.message(F.text == '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –î–ó')
@router.message(Command('homework'))
async def submitting_homework(message: Message):
    tg_id = message.from_user.id
    async with async_session() as session:
        student = await get_student(session, tg_id)
        if student:
            homework_text = (
                "<b>‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –î–ó</b>\n\n"
                "–ï—Å—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä:\n\n"
                "üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –î–ó\n"
                "‚îú –î–∞–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—à –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
                "‚îú –î–∑ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≤–∏–¥–µ: <b>—Ñ–æ—Ç–æ</b>, <b>–≤–∏–¥–µ–æ</b>, <b>—Ç–µ–∫—Å—Ç–∞</b>, <b>–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ</b> –∏–ª–∏ <b>—Å—Å—ã–ª–∫–∏</b>\n"
                "‚îú –ó–∞ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+3 –±–∞–ª–ª–∞</b>, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º\n\n"
                "üìÜ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
                "‚îú –î–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
                "‚îú –ó–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤, –æ–±—É—á–∞—é—â–∏—Ö—Å—è —Ç–æ–ª—å–∫–æ –≤–æ–∫–∞–ª—É, —Ç–æ–ª—å–∫–æ –≥–∏—Ç–∞—Ä–µ –∏–ª–∏ —Å—Ä–∞–∑—É –≤–æ–∫–∞–ª—É –∏ –≥–∏—Ç–∞—Ä–µ, –±—É–¥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è\n"
                "‚îú –ó–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)\n"
                "‚îú –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞, –∑–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è\n"
                "‚îú –ó–∞ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+1 –±–∞–ª–ª</b>, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º\n\n"
                "üìπ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –ø–µ—Å–Ω–∏ –≤ —Å–≤–æ–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏\n"
                "‚îú –ü–µ—Å–Ω—é –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ª—é–±—É—é, –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é\n"
                "‚îú –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü\n"
                "‚îú –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+2 –±–∞–ª–ª–∞</b>, –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"
            )
            await message.answer(text=homework_text, parse_mode='HTML', reply_markup=kb.inline_homework1)
        else:
            await message.answer(
                text=f'{message.from_user.first_name}, —ç—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
                reply_markup=kb.registration
            )


@router.callback_query(F.data.startswith('cancel'))
async def call_cancels(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await info_homework(callback, reply_markup=kb.inline_homework1)


@router.callback_query(F.data.startswith('send'))
async def call_submitting(callback: CallbackQuery):
    await info_homework(callback, reply_markup=kb.inline_homework)


@router.callback_query(F.data.startswith('dz_send'))
async def call_submitting_homework(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:',
                                     reply_markup=await kb.choice_teacher(tg_id))
    await state.set_state(HomeworkState.ChoiceTeacher)


@router.callback_query(F.data.startswith('1_canceled'))
async def call_submitting_homework(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    tg_id = callback.from_user.id
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:',
                                     reply_markup=await kb.choice_teacher(tg_id))
    await state.set_state(HomeworkState.ChoiceTeacher)


@router.callback_query(F.data.startswith('choice_'), HomeworkState.ChoiceTeacher)
async def teacher_selected_for_homework(callback: CallbackQuery, state: FSMContext):
    teacher_id = callback.data.split('_')[1]
    await state.update_data(teacher_id=teacher_id)
    await callback.message.edit_text(text='–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=kb.dz_type)
    await state.set_state(HomeworkState.ChoosingDZType)


@router.callback_query(F.data.startswith('p_p'), HomeworkState.ChoosingDZType)
async def dz_type_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='üòÅ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è!',
                                     reply_markup=kb.tree_can_send)
    await state.set_state(HomeworkState.WaitingForPhoto)


@router.callback_query(F.data.startswith('v_v'), HomeworkState.ChoosingDZType)
async def dz_type_video(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='üòÅ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è!',
                                     reply_markup=kb.tree_can_send)
    await state.set_state(HomeworkState.WaitingForVideo)


@router.callback_query(F.data.startswith('t_l'), HomeworkState.ChoosingDZType)
async def dz_type_text_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text='üòÅ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Å–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É!',
        reply_markup=kb.tree_can_send)
    await state.set_state(HomeworkState.WaitingForTextAndLinks)


@router.callback_query(F.data.startswith('o_i'), HomeworkState.ChoosingDZType)
async def dz_type_text_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='üòÅ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç!',
                                     reply_markup=kb.tree_can_send)
    await state.set_state(HomeworkState.WaitingForVoice)


@router.message(F.photo, HomeworkState.WaitingForPhoto)
async def receive_homework_photo(message: Message, state: FSMContext):
    tg_id = message.from_user.id

    state_data = await state.get_data()
    current_media_group_id = state_data.get('current_media_group_id')

    if message.media_group_id and message.media_group_id == current_media_group_id:
        return

    if message.media_group_id:
        await state.update_data(current_media_group_id=message.media_group_id)
        await message.answer(text="üö´–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                             reply_markup=kb.tree_can_send)
        return

    async with async_session() as session:
        student = await session.scalar(select(Student).where(Student.tg_id == tg_id))
        if not student:
            await message.answer("üö´–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        student_id = student.id

    data = await state.get_data()
    teacher_id = data.get('teacher_id')

    photo_id = message.photo[-1].file_id

    await state.update_data(photo_id=photo_id, student_id=student_id, teacher_id=teacher_id)
    await message.answer(text="üßê–í—Å—ë –≤–µ—Ä–Ω–æ? –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.confirmation)


@router.callback_query(F.data.in_(['confirm', 'change']), HomeworkState.WaitingForPhoto)
async def confirm_homework_photo(callback: CallbackQuery, state: FSMContext, bot: Bot):
    call_data = callback.data

    if call_data == 'confirm':
        data = await state.get_data()
        photo_id = data['photo_id']
        student_id = data['student_id']
        teacher_id = data['teacher_id']

        async with async_session() as session:
            student = await session.scalar(select(Student).where(Student.id == student_id))
            if not student:
                await callback.message.answer("üö´–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞.")
                return

        full_name = f'{student.name} {student.last_name}'

        file = await bot.get_file(photo_id)
        file_path = file.file_path

        directory = "application/media/photo"
        if not os.path.exists(directory):
            os.makedirs(directory)

        timestamp = datetime.datetime.now().strftime("%d_%m_%Y_%H-%M-%S")
        filename = f"{directory}/{teacher_id}_{student_id}_{full_name}_{timestamp}_photo.jpg"

        await bot.download_file(file_path, filename)
        await callback.message.answer(text="‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ç–æ) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=kb.menu)
        await state.clear()
    elif call_data == 'change':
        await callback.message.answer(text="üòå–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.",
                                      reply_markup=kb.tree_can_send)

    await callback.answer()


@router.message(F.video, HomeworkState.WaitingForVideo)
async def receive_homework_video(message: Message, state: FSMContext):
    tg_id = message.from_user.id

    async with async_session() as session:
        student = await session.scalar(select(Student).where(Student.tg_id == tg_id))
        if not student:
            await message.answer("üö´–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        student_id = student.id

    data = await state.get_data()
    teacher_id = data.get('teacher_id')

    video_id = message.video.file_id

    await state.update_data(video_id=video_id, student_id=student_id, teacher_id=teacher_id)
    await message.answer(text="üßê–í—Å—ë –≤–µ—Ä–Ω–æ? –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.confirmation_video)


@router.callback_query(F.data.in_(['vi_confirm', 'deo_change']), HomeworkState.WaitingForVideo)
async def confirm_homework_video(callback: CallbackQuery, state: FSMContext, bot: Bot):
    call_data = callback.data

    if call_data == 'vi_confirm':
        data = await state.get_data()
        video_id = data['video_id']
        student_id = data['student_id']
        teacher_id = data['teacher_id']

        async with async_session() as session:
            student = await session.scalar(select(Student).where(Student.id == student_id))
            if not student:
                await callback.message.answer("üö´–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞.")
                return

        full_name = f'{student.name} {student.last_name}'

        try:
            file = await bot.get_file(video_id)
            file_path = file.file_path

            directory = "application/media/video"
            if not os.path.exists(directory):
                os.makedirs(directory)

            timestamp = datetime.datetime.now().strftime("%d_%m_%Y_%H-%M-%S")
            filename = f"{directory}/{teacher_id}_{student_id}_{full_name}_{timestamp}_video.mp4"

            await bot.download_file(file_path, filename)
            await callback.message.answer(text="‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–≤–∏–¥–µ–æ) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=kb.menu)
            await state.clear()
        except TelegramBadRequest as e:
            if "file is too big" in str(e):
                text = (
                    "<b>‚úâÔ∏è–û—à–∏–±–∫–∞!</b>\n\n"
                    "üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–µ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—Å–∏—Ç (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)!\n"
                    "‚îú –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏.\n"
                    "‚îú –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ, –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
                )
                await callback.message.edit_text(text=text, reply_markup=kb.inline_keyboard_error_video)
            else:
                await callback.message.answer(text="üòî–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.", reply_markup=kb.menu1)
    elif call_data == 'deo_change':
        await callback.message.answer(text="üòå–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.",
                                      reply_markup=kb.tree_can_send)

    await callback.answer()


def format_text(text, line_length=80):
    lines = []
    while text:
        if len(text) > line_length:
            space_index = text.rfind(' ', 0, line_length)
            if space_index == -1:
                space_index = line_length
            lines.append(text[:space_index])
            text = text[space_index:].lstrip()
        else:
            lines.append(text)
            break
    return '\n'.join(lines)


def find_links(text):
    url_regex = r'https?://[^\s]+'
    return re.findall(url_regex, text)


@router.message(F.text, HomeworkState.WaitingForTextAndLinks)
async def receive_homework_text(message: Message, state: FSMContext):
    tg_id = message.from_user.id

    async with async_session() as session:
        student = await session.scalar(select(Student).where(Student.tg_id == tg_id))
        if not student:
            await message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        student_id = student.id

    data = await state.get_data()
    teacher_id = data.get('teacher_id')

    await state.update_data(text=message.text, student_id=student_id, teacher_id=teacher_id)
    await message.answer(text="üßê–í—Å—ë –≤–µ—Ä–Ω–æ? –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.confirmation_text)


async def save_homework_with_links(directory_links, filename_links, links):
    if not os.path.exists(directory_links):
        os.makedirs(directory_links)

    with open(filename_links, 'w', encoding='utf-8') as file:
        file.write('<html><body>\n')
        for link in links:
            file.write(f'<a href="{link}">{link}</a><br>\n')
        file.write('</body></html>')


async def save_homework_text(directory, filename, text_content):
    if not os.path.exists(directory):
        os.makedirs(directory)

    with open(filename, 'w', encoding='utf-8') as file:
        file.write(text_content)


@router.callback_query(F.data.in_(['te_confirm', 'xt_change']), HomeworkState.WaitingForTextAndLinks)
async def confirm_homework_text(callback: CallbackQuery, state: FSMContext):
    call_data = callback.data
    data = await state.get_data()

    if call_data == 'te_confirm':
        text = data.get('text')
        student_id = data.get('student_id')
        teacher_id = data.get('teacher_id')

        async with async_session() as session:
            student = await session.scalar(select(Student).where(Student.id == student_id))
            if not student:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞.")
                return

        full_name = f'{student.name} {student.last_name}'
        timestamp = datetime.datetime.now().strftime("%d_%m_%Y_%H-%M-%S")
        links = find_links(text)

        if links:
            directory_links = "application/media/links"
            filename_links = f"{directory_links}/{teacher_id}_{student_id}_{full_name}_{timestamp}_links.html"
            await save_homework_with_links(directory_links, filename_links, links)
            response_message = "‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Å—Å—ã–ª–∫–∞) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
        else:
            text_content = format_text(text)
            directory = "application/media/text"
            filename = f"{directory}/{teacher_id}_{student_id}_{full_name}_{timestamp}_text.txt"
            await save_homework_text(directory, filename, text_content)
            response_message = "‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"

        await callback.message.answer(text=response_message, reply_markup=kb.menu)
    elif call_data == 'xt_change':
        await callback.message.answer(text="üòå–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.",
                                      reply_markup=kb.tree_can_send)

    await callback.answer()
    await state.clear()


@router.message(F.voice, HomeworkState.WaitingForVoice)
async def receive_homework_voice(message: Message, state: FSMContext):
    tg_id = message.from_user.id

    async with async_session() as session:
        student = await session.scalar(select(Student).where(Student.tg_id == tg_id))
        if not student:
            await message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        student_id = student.id

    data = await state.get_data()
    teacher_id = data.get('teacher_id')

    voice_id = message.voice.file_id

    await state.update_data(voice_id=voice_id, student_id=student_id, teacher_id=teacher_id)
    await message.answer(text="üßê–í—Å—ë –≤–µ—Ä–Ω–æ? –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.confirmation_voice)


@router.callback_query(F.data.in_(['voi_confirm', 'ce_change']), HomeworkState.WaitingForVoice)
async def confirm_homework_voice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    call_data = callback.data

    if call_data == 'voi_confirm':
        data = await state.get_data()
        voice_id = data['voice_id']
        student_id = data['student_id']
        teacher_id = data['teacher_id']

        async with async_session() as session:
            student = await session.scalar(select(Student).where(Student.id == student_id))
            if not student:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞.")
                return

        full_name = f'{student.name} {student.last_name}'

        file = await bot.get_file(voice_id)
        file_path = file.file_path

        directory = "application/media/voice"
        if not os.path.exists(directory):
            os.makedirs(directory)

        timestamp = datetime.datetime.now().strftime("%d_%m_%Y_%H-%M-%S")
        filename = f"{directory}/{teacher_id}_{student_id}_{full_name}_{timestamp}_voice.ogg"

        await bot.download_file(file_path, filename)
        await callback.message.answer(text="‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                                      reply_markup=kb.menu)
        await state.clear()
    elif call_data == 'ce_change':
        await callback.message.answer(text="üòå–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.",
                                      reply_markup=kb.tree_can_send)
    await callback.answer()


@router.callback_query(F.data.startswith('vid_send'))
async def call_submitting_homework_2(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:',
                                     reply_markup=await kb.choice_teacher(tg_id))
    await state.set_state(HomeworkState2.ChoiceTeacher2)


@router.callback_query(F.data.startswith('2_canceled'))
async def call_submitting_homework_2(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    tg_id = callback.from_user.id
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:',
                                     reply_markup=await kb.choice_teacher(tg_id))
    await state.set_state(HomeworkState2.ChoiceTeacher2)


@router.callback_query(F.data.startswith('choice_'), HomeworkState2.ChoiceTeacher2)
async def teacher_selected_for_homework_2(callback: CallbackQuery, state: FSMContext):
    teacher_id = callback.data.split('_')[1]
    await state.update_data(teacher_id=teacher_id)
    await callback.message.edit_text(text='–í –∫–∞–∫–æ–º –≤–∏–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ?', reply_markup=kb.dz_type_2)
    await state.set_state(HomeworkState2.ChoosingDZType2)


@router.callback_query(F.data.startswith('vvv'), HomeworkState2.ChoosingDZType2)
async def dz_type_video_2(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='üòÅ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è!',
                                     reply_markup=kb.tree_can_send)
    await state.set_state(HomeworkState2.WaitingForVideo2)


@router.callback_query(F.data.startswith('lll'), HomeworkState2.ChoosingDZType2)
async def dz_type_links_2(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text='üòÅ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∞—à–∏–º –≤–∏–¥–µ–æ!',
        reply_markup=kb.tree_can_send)
    await state.set_state(HomeworkState2.WaitingForLinks2)


@router.message(F.video, HomeworkState2.WaitingForVideo2)
async def receive_homework_video_2(message: Message, state: FSMContext):
    tg_id = message.from_user.id

    async with async_session() as session:
        student = await session.scalar(select(Student).where(Student.tg_id == tg_id))
        if not student:
            await message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        student_id = student.id

    data = await state.get_data()
    teacher_id = data.get('teacher_id')

    video_id = message.video.file_id

    await state.update_data(video_id=video_id, student_id=student_id, teacher_id=teacher_id)
    await message.answer(text="üßê–í—Å—ë –≤–µ—Ä–Ω–æ? –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.confirmation_video_2)


@router.callback_query(F.data.in_(['iv_2_confirm', 'oed_2_change']), HomeworkState2.WaitingForVideo2)
async def confirm_homework_video_2(callback: CallbackQuery, state: FSMContext, bot: Bot):
    call_data = callback.data

    if call_data == 'iv_2_confirm':
        data = await state.get_data()
        video_id = data['video_id']
        student_id = data['student_id']
        teacher_id = data['teacher_id']

        async with async_session() as session:
            student = await session.scalar(select(Student).where(Student.id == student_id))
            if not student:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞.")
                return

        full_name = f'{student.name} {student.last_name}'

        try:
            file = await bot.get_file(video_id)
            file_path = file.file_path

            directory = "application/media/video"
            if not os.path.exists(directory):
                os.makedirs(directory)

            timestamp = datetime.datetime.now().strftime("%d_%m_%Y_%H-%M-%S")
            filename = f"{directory}/{teacher_id}_{student_id}_{full_name}_{timestamp}_video.mp4"

            await bot.download_file(file_path, filename)
            await callback.message.answer(text="‚úÖ–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=kb.menu)
            await state.clear()
        except TelegramBadRequest as e:
            if "file is too big" in str(e):
                text = (
                    "<b>‚úâÔ∏è–û—à–∏–±–∫–∞!</b>\n\n"
                    "üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–µ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—Å–∏—Ç (–º–∞–∫—Å–∏–º—É–º 50 –ú–ë)!\n"
                    "‚îú –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏.\n"
                    "‚îú –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ, –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
                )
                await callback.message.edit_text(text=text, reply_markup=kb.inline_keyboard_error_video)
            else:
                await callback.message.answer(text="üòî–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.", reply_markup=kb.menu1)
    elif call_data == 'oed_2_change':
        await callback.message.answer(text="üòå–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.",
                                      reply_markup=kb.tree_can_send)

    await callback.answer()


@router.message(F.text, HomeworkState2.WaitingForLinks2)
async def receive_homework_text_2(message: Message, state: FSMContext):
    tg_id = message.from_user.id

    async with async_session() as session:
        student = await session.scalar(select(Student).where(Student.tg_id == tg_id))
        if not student:
            await message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        student_id = student.id

    data = await state.get_data()
    teacher_id = data.get('teacher_id')

    await state.update_data(text=message.text, student_id=student_id, teacher_id=teacher_id)
    await message.answer(text="üßê–í—Å—ë –≤–µ—Ä–Ω–æ? –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.confirmation_text_2)


@router.callback_query(F.data.in_(['et_2_confirm', 'tx_2_change']), HomeworkState2.WaitingForLinks2)
async def confirm_homework_text_2(callback: CallbackQuery, state: FSMContext):
    call_data = callback.data
    data = await state.get_data()

    if call_data == 'et_2_confirm':
        text = data.get('text')
        student_id = data.get('student_id')
        teacher_id = data.get('teacher_id')

        async with async_session() as session:
            student = await session.scalar(select(Student).where(Student.id == student_id))
            if not student:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞.")
                return

        full_name = f'{student.name} {student.last_name}'
        timestamp = datetime.datetime.now().strftime("%d_%m_%Y_%H-%M-%S")
        links = find_links(text)

        if links:
            directory_links = "application/media/links"
            filename_links = f"{directory_links}/{teacher_id}_{student_id}_{full_name}_{timestamp}_links.html"
            await save_homework_with_links(directory_links, filename_links, links)
            response_message = "‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Å—Å—ã–ª–∫–∞) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
        else:
            response_message = "‚ùé–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç, –∞ –Ω—É–∂–Ω–æ —Å—Å—ã–ª–∫—É!"
        await callback.message.answer(text=response_message, reply_markup=kb.menu)
    elif call_data == 'tx_2_change':
        await callback.message.answer(text="üòå–û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑.",
                                      reply_markup=kb.tree_can_send)

    await callback.answer()
    await state.clear()


@router.message(F.video | F.text | F.document | F.sticker | F.voice | F.location | F.contact | F.poll,
                HomeworkState.WaitingForPhoto)
async def wrong_homework_type(message: Message):
    await message.answer(text="ü•∫–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–æ–∂–∏–¥–∞–ª–æ—Å—å —Ñ–æ—Ç–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=kb.tree_can_send)


@router.message(F.photo | F.text | F.document | F.sticker | F.voice | F.location | F.contact | F.poll,
                HomeworkState.WaitingForVideo)
async def wrong_type_for_video(message: Message):
    await message.answer(text="ü•∫–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–æ–∂–∏–¥–∞–ª–æ—Å—å –≤–∏–¥–µ–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=kb.tree_can_send)


@router.message(F.photo | F.video | F.document | F.sticker | F.voice | F.location | F.contact | F.poll,
                HomeworkState.WaitingForTextAndLinks)
async def wrong_type_for_text_and_links(message: Message):
    await message.answer(
        text="ü•∫–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–æ–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        reply_markup=kb.tree_can_send)


@router.message(F.photo | F.video | F.text | F.document | F.sticker | F.location | F.contact | F.poll,
                HomeworkState.WaitingForVoice)
async def wrong_type_for_voice(message: Message):
    await message.answer(text="ü•∫–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–æ–∂–∏–¥–∞–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–µ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=kb.tree_can_send)


@router.message(F.photo | F.text | F.document | F.sticker | F.voice | F.location | F.contact | F.poll,
                HomeworkState2.WaitingForVideo2)
async def wrong_type_for_video_2(message: Message):
    await message.answer(text="ü•∫–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–∂–∏–¥–∞–ª–æ—Å—å –≤–∏–¥–µ–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=kb.tree_can_send)


@router.message(F.photo | F.video | F.document | F.sticker | F.voice | F.location | F.contact | F.poll,
                HomeworkState2.WaitingForLinks2)
async def wrong_type_for_links_2(message: Message):
    await message.answer(text="ü•∫–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–∂–∏–¥–∞–ª–∞—Å—å —Å—Å—ã–ª–∫–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=kb.tree_can_send)
