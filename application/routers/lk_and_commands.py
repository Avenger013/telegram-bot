from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from application.states import Gifts, Systems
from application.database.models import PointsHistory, async_session
from application.database.requests import get_student_info, get_top_students, get_leader_of_the_month, get_money, \
    get_gifts, get_student, get_gift_by_id, update_student_points, get_support, get_info, get_task_by_id

import application.keyboard as kb

router = Router(name=__name__)


@router.message(F.text == 'üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
@router.message(Command('profile'))
async def personal_area(message: Message):
    tg_id = message.from_user.id
    async with async_session() as session:
        student, teachers = await get_student_info(session, tg_id)

        if student:
            student_name = student.name
            student_last_name = student.last_name
            phone = student.phone
            specialisation_student = student.specialisation_student
            point = student.point
            teacher_word = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" if len(teachers) == 1 else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
            teachers_info = "–ù–µ —É–∫–∞–∑–∞–Ω" if not teachers else ", ".join([f"{t.name} {t.last_name}" for t in teachers])

            response = "üîê <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            response += f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {student_name} {student_last_name}\n"
            response += f"üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"

            if specialisation_student == "–í–æ–∫–∞–ª":
                response += f"üé§–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialisation_student}\n"
            elif specialisation_student == "–ì–∏—Ç–∞—Ä–∞":
                response += f"üé∏–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialisation_student}\n"
            else:
                response += f"üé§/üé∏–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialisation_student}\n"

            response += f"üéì{teacher_word}: {teachers_info}\n"
            response += f"\nüßÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {point}\n"
            response += "\n–°–∏—Å—Ç–µ–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ —Ç–æ, –Ω–∞ —á—Ç–æ –∏—Ö –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å, –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ üéÅ–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"

            await message.answer(response, parse_mode='HTML', reply_markup=kb.inline_keyboard_personal_area)
            await message.answer(text='', reply_markup=kb.menu)
        else:
            await message.answer(
                text=f'{message.from_user.first_name}, —ç—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
                reply_markup=kb.registration
            )


@router.callback_query(F.data.startswith('back'))
async def call_back(callback: CallbackQuery):
    tg_id = callback.from_user.id
    async with async_session() as session:
        student, teachers = await get_student_info(session, tg_id)

        if student:
            student_name = student.name
            student_last_name = student.last_name
            phone = student.phone
            specialisation_student = student.specialisation_student
            point = student.point
            teacher_word = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" if len(teachers) == 1 else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
            teachers_info = "–ù–µ —É–∫–∞–∑–∞–Ω" if not teachers else ", ".join([f"{t.name} {t.last_name}" for t in teachers])

            response = "üîê <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            response += f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {student_name} {student_last_name}\n"
            response += f"üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"

            if specialisation_student == "–í–æ–∫–∞–ª":
                response += f"üé§–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialisation_student}\n"
            elif specialisation_student == "–ì–∏—Ç–∞—Ä–∞":
                response += f"üé∏–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialisation_student}\n"
            else:
                response += f"üé§/üé∏–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialisation_student}\n"

            response += f"üéì{teacher_word}: {teachers_info}\n"
            response += f"\nüßÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {point}\n"
            response += "\n–°–∏—Å—Ç–µ–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ —Ç–æ, –Ω–∞ —á—Ç–æ –∏—Ö –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å, –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ üéÅ–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"

            await callback.message.edit_text(response, parse_mode='HTML', reply_markup=kb.inline_keyboard_personal_area)
            await callback.message.answer(text='', reply_markup=kb.menu)
        else:
            await callback.message.edit_text(
                text=f'{callback.from_user.first_name}, —ç—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
                reply_markup=kb.registration
            )


def get_points_word(points):
    if points % 10 == 1 and points % 100 != 11:
        return "–±–∞–ª–ª"
    elif 2 <= points % 10 <= 4 and (points % 100 < 10 or points % 100 >= 20):
        return "–±–∞–ª–ª–∞"
    else:
        return "–±–∞–ª–ª–æ–≤"


@router.message(F.text == 'üìä –¢–û–ü —É—á–µ–Ω–∏–∫–æ–≤')
@router.message(Command('top'))
async def top_students(message: Message):
    top_students_list = await get_top_students(10)
    if top_students_list:
        response_message = "üèÜ –¢–û–ü —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–ª–∞–º:\n\n"
        for i, student in enumerate(top_students_list, start=1):
            points_word = get_points_word(student.point)
            response_message += f"{i}. {student.name} {student.last_name} - {student.point} {points_word}\n"
    else:
        response_message = "–£—á–µ–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."

    await message.answer(response_message, reply_markup=kb.back3)


@router.callback_query(F.data.startswith('viewing'))
async def call_top_students(callback: CallbackQuery):
    top_students_list = await get_top_students(10)
    if top_students_list:
        response_message = "üèÜ –¢–û–ü —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–ª–∞–º:\n\n"
        for i, student in enumerate(top_students_list, start=1):
            points_word = get_points_word(student.point)
            response_message += f"{i}. {student.name} {student.last_name} - {student.point} {points_word}\n"
    else:
        response_message = "–£—á–µ–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."

    await callback.message.edit_text(response_message, reply_markup=kb.back2)


@router.message(F.text == 'üìà –õ–∏–¥–µ—Ä –º–µ—Å—è—Ü–∞')
@router.message(Command('leader'))
async def leader_of_the_month(message: Message):
    current_year = datetime.now().year
    current_month = datetime.now().month

    leader_info = await get_leader_of_the_month(current_year, current_month)

    if leader_info:
        response_message = (
            "<b>üèÜ –õ–∏–¥–µ—Ä –º–µ—Å—è—Ü–∞:</b>\n\n"
            f"<b>üåü {leader_info['name']} {leader_info['last_name']} üåü</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –±–∞–ª–ª–æ–≤: <b>{leader_info['total_points']}</b>"
        )
    else:
        response_message = "<b>–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—â–µ –Ω–µ—Ç –ª–∏–¥–µ—Ä–∞.</b>"

    await message.answer(response_message, reply_markup=kb.back3, parse_mode='HTML')


@router.callback_query(F.data.startswith('lead'))
async def call_leader_of_the_month(callback: CallbackQuery):
    current_year = datetime.now().year
    current_month = datetime.now().month

    leader_info = await get_leader_of_the_month(current_year, current_month)

    if leader_info:
        response_message = (
            "<b>üèÜ –õ–∏–¥–µ—Ä –º–µ—Å—è—Ü–∞:</b>\n\n"
            f"<b>üåü {leader_info['name']} {leader_info['last_name']} üåü</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –±–∞–ª–ª–æ–≤: <b>{leader_info['total_points']}</b>"
        )
    else:
        response_message = "<b>–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—â–µ –Ω–µ—Ç –ª–∏–¥–µ—Ä–∞.</b>"

    await callback.message.edit_text(response_message, reply_markup=kb.back2, parse_mode='HTML')


@router.message(F.text == 'üéÅ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è')
@router.message(Command('monetization'))
async def monetization_list(message: Message):
    monetization_items = await get_money()
    response_text = "<b>–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:</b>\n"

    for item in monetization_items:
        points_word = get_points_word(item.number_of_points)
        response_text += f"        {item.task} - {item.number_of_points} {points_word}\n"

    gifts = await get_gifts()
    response_text += "\n\n<b>–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:</b>\n"

    for gift in gifts:
        points_word = get_points_word(gift.number_of_points)
        response_text += f"        {gift.present} - {gift.number_of_points} {points_word}\n"

    await message.answer(text=response_text, reply_markup=kb.back4, parse_mode='HTML')


async def call_monetization_list_info(callback: CallbackQuery, reply_markup):
    monetization_items = await get_money()
    response_text = "<b>–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:</b>\n"

    for item in monetization_items:
        points_word = get_points_word(item.number_of_points)
        response_text += f"        {item.task} - {item.number_of_points} {points_word}\n"

    gifts = await get_gifts()
    response_text += "\n\n<b>–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤:</b>\n"

    for gift in gifts:
        points_word = get_points_word(gift.number_of_points)
        response_text += f"        {gift.present} - {gift.number_of_points} {points_word}\n"

    await callback.message.edit_text(text=response_text, parse_mode='HTML', reply_markup=reply_markup)


@router.callback_query(F.data.startswith('comeback'))
async def call_comeback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await call_monetization_list_info(callback, reply_markup=kb.back4)


@router.callback_query(F.data.startswith('money'))
async def call_monetization_list(callback: CallbackQuery):
    await call_monetization_list_info(callback, reply_markup=kb.back)


@router.callback_query(F.data.startswith('buy'))
async def exchange_points(callback: CallbackQuery, state: FSMContext):
    new_markup = await kb.choosing_a_gift()
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π —Å—Ä–∞–∑—É):",
        reply_markup=new_markup)
    await state.set_state(Gifts.Gift)


@router.callback_query(F.data.startswith('gifts_'), Gifts.Gift)
async def gift_selected(callback: CallbackQuery, state: FSMContext):
    gift_id = int(callback.data.split('_')[1])
    data = await state.get_data()
    selected_gifts = data.get('selected_gifts', [])
    if gift_id in selected_gifts:
        selected_gifts.remove(gift_id)
        await callback.answer("–ü–æ–¥–∞—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    else:
        selected_gifts.append(gift_id)
        await callback.answer("–ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    await state.update_data(selected_gifts=selected_gifts)

    new_markup = await kb.choosing_a_gift(selected_gifts)
    await callback.message.edit_reply_markup(reply_markup=new_markup)


async def calculate_total_points(selected_gift_ids):
    total_points_needed = 0
    gifts_descriptions = []

    for gift_id in selected_gift_ids:
        gift = await get_gift_by_id(int(gift_id))
        if gift:
            total_points_needed += gift.number_of_points
            gifts_descriptions.append(f"{gift.present} ({gift.number_of_points} –±–∞–ª–ª–æ–≤)")

    return total_points_needed, gifts_descriptions


@router.callback_query(F.data == 'selecting_gifts')
async def selecting_gifts(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_gift_ids = data.get('selected_gifts', [])
    tg_id = callback.from_user.id
    async with async_session() as session:
        student = await get_student(session, tg_id)
        if student:
            total_points_needed, gifts_descriptions = await calculate_total_points(selected_gift_ids)
            if student.point < total_points_needed:
                await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤.")
                await callback.message.answer(text="–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä?",
                                              reply_markup=kb.choice_keyboard)
            else:
                student.point -= total_points_needed
                await update_student_points(session, student.id, student.point)
                await session.commit()
                if len(gifts_descriptions) > 1:
                    gifts_text = "–ë–∞–ª–ª—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã, –≤—ã –ø–æ–ª—É—á–∏–ª–∏:\n" + ";\n".join(gifts_descriptions) + "."
                else:
                    gifts_text = "–ë–∞–ª–ª—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n" + "; ".join(gifts_descriptions) + "."

                await callback.message.edit_text(
                    text=gifts_text + "\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.", reply_markup=kb.back3
                )
        else:
            await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()


@router.callback_query(F.data.startswith('select_gifts_again'))
async def exchange_points(callback: CallbackQuery, state: FSMContext):
    new_markup = await kb.choosing_a_gift()
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π —Å—Ä–∞–∑—É):",
        reply_markup=new_markup)
    await state.set_state(Gifts.Gift)


@router.callback_query(F.data.startswith('finish_selection'))
async def call_monetization_list(callback: CallbackQuery):
    # await state.clear()
    await call_monetization_list_info(callback, reply_markup=kb.back4)


@router.message(F.text == '‚úçüèº –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
@router.message(Command('support'))
async def support_service(message: Message):
    support_info = await get_support()
    response_text = "‚úçüèº <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"

    for info in support_info:
        response_text += f"{info.instruction_support} ü§ùüèº.\n"

    await message.answer(text=response_text, reply_markup=kb.back3, parse_mode='HTML')


@router.callback_query(F.data.startswith('supp'))
async def call_support_service(callback: CallbackQuery):
    support_info = await get_support()
    response_text = "‚úçüèº <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"

    for info in support_info:
        response_text += f"{info.instruction_support} ü§ùüèº.\n"

    await callback.message.edit_text(text=response_text, reply_markup=kb.back2, parse_mode='HTML')


@router.message(F.text == '‚ùî –û –±–æ—Ç–µ')
@router.message(Command('info'))
async def information_bot(message: Message):
    bot_info = await get_info()
    response_text = "‚ùî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"

    for info in bot_info:
        response_text += f"{info.instruction}\n\n"

    await message.answer(text=response_text, reply_markup=kb.back3, parse_mode='HTML')


@router.callback_query(F.data.startswith('the_info'))
async def call_information_bot(callback: CallbackQuery):
    bot_info = await get_info()
    response_text = "‚ùî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"

    for info in bot_info:
        response_text += f"{info.instruction}\n\n"

    await callback.message.edit_text(text=response_text, reply_markup=kb.back2, parse_mode='HTML')


@router.callback_query(F.data.startswith('receiving'))
async def getting_points(callback: CallbackQuery, state: FSMContext):
    monetization_items = await get_money()
    new_markup = await kb.choosing_a_money()
    response_text = "<b>–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:</b>\n"

    for index, item in enumerate(monetization_items, start=1):
        points_word = get_points_word(item.number_of_points)
        response_text += f"        {index}) {item.task} - <b>{item.number_of_points}</b> {points_word}\n"

    response_text += (
        "\n\nüéÅ–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏!\n"
        "‚îú –ú—ã —É–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–º –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –±–∞–ª–ª—ã!\n"
        "‚îú –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π —Å—Ä–∞–∑—É:"
    )

    await callback.message.edit_text(text=response_text, reply_markup=new_markup, parse_mode='HTML')
    await state.set_state(Systems.System)


@router.callback_query(F.data.startswith('6_monetization_'), Systems.System)
async def task_selected(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split('_')[2])
    data = await state.get_data()
    selected_tasks = data.get('selected_tasks', [])

    if task_id in selected_tasks:
        selected_tasks.remove(task_id)
        await callback.answer("–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")
    else:
        selected_tasks.append(task_id)
        await callback.answer("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")

    await state.update_data(selected_tasks=selected_tasks)

    new_markup = await kb.choosing_a_money(selected_tasks)
    await callback.message.edit_reply_markup(reply_markup=new_markup)


async def calculate_total_points_for_tasks(selected_task_ids):
    total_points = 0

    for task_id in selected_task_ids:
        task = await get_task_by_id(int(task_id))
        if task:
            total_points += task.number_of_points

    return total_points


@router.callback_query(F.data == 'on_selecting')
async def selecting_money(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_task_ids = data.get('selected_tasks', [])
    tg_id = callback.from_user.id

    if not selected_task_ids:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
        return

    async with async_session() as session:
        student = await get_student(session, tg_id)
        if student:
            total_points_to_add = await calculate_total_points_for_tasks(selected_task_ids)

            new_points_history = PointsHistory(student_id=student.id, points_added=total_points_to_add,
                                               date_added=datetime.now())
            session.add(new_points_history)

            student.point += total_points_to_add
            await update_student_points(session, student.id, student.point)
            await session.refresh(student)
            await callback.message.answer(
                text=f"‚úÖ –ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!\n–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: <b>{student.point}</b>",
                parse_mode='HTML', reply_markup=kb.menu)
        else:
            await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()
